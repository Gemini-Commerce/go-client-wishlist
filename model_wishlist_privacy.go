/*
wishlist/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wishlist

import (
	"encoding/json"
	"fmt"
)

// WishlistPrivacy the model 'WishlistPrivacy'
type WishlistPrivacy string

// List of wishlistPrivacy
const (
	WISHLISTPRIVACY_UNKNOWN WishlistPrivacy = "PRIVACY_UNKNOWN"
	WISHLISTPRIVACY_PUBLIC WishlistPrivacy = "PRIVACY_PUBLIC"
	WISHLISTPRIVACY_PRIVATE WishlistPrivacy = "PRIVACY_PRIVATE"
	WISHLISTPRIVACY_SHARED WishlistPrivacy = "PRIVACY_SHARED"
)

// All allowed values of WishlistPrivacy enum
var AllowedWishlistPrivacyEnumValues = []WishlistPrivacy{
	"PRIVACY_UNKNOWN",
	"PRIVACY_PUBLIC",
	"PRIVACY_PRIVATE",
	"PRIVACY_SHARED",
}

func (v *WishlistPrivacy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WishlistPrivacy(value)
	for _, existing := range AllowedWishlistPrivacyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WishlistPrivacy", value)
}

// NewWishlistPrivacyFromValue returns a pointer to a valid WishlistPrivacy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWishlistPrivacyFromValue(v string) (*WishlistPrivacy, error) {
	ev := WishlistPrivacy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WishlistPrivacy: valid values are %v", v, AllowedWishlistPrivacyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WishlistPrivacy) IsValid() bool {
	for _, existing := range AllowedWishlistPrivacyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wishlistPrivacy value
func (v WishlistPrivacy) Ptr() *WishlistPrivacy {
	return &v
}

type NullableWishlistPrivacy struct {
	value *WishlistPrivacy
	isSet bool
}

func (v NullableWishlistPrivacy) Get() *WishlistPrivacy {
	return v.value
}

func (v *NullableWishlistPrivacy) Set(val *WishlistPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableWishlistPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableWishlistPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWishlistPrivacy(val *WishlistPrivacy) *NullableWishlistPrivacy {
	return &NullableWishlistPrivacy{value: val, isSet: true}
}

func (v NullableWishlistPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWishlistPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

